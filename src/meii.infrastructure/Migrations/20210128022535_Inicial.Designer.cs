// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using meii.infrastrutucture.Context;

namespace meii.infrastructure.Migrations
{
    [DbContext(typeof(MEContext))]
    [Migration("20210128022535_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("meii.Business.Entities.CartaoFidelidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("DataFim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<bool>("Pin")
                        .HasColumnType("bit");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("cartaofidelidade");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CartaoFidelidade");
                });

            modelBuilder.Entity("meii.Business.Entities.Cartoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoSeguranca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titular")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cartoes");
                });

            modelBuilder.Entity("meii.Business.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("categoria");
                });

            modelBuilder.Entity("meii.Business.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar")
                        .HasMaxLength(8);

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("meii.Business.Entities.ClienteCartaoFidelidade", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("CartaoFidelidadeId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId", "CartaoFidelidadeId");

                    b.HasIndex("CartaoFidelidadeId");

                    b.ToTable("clientecartaofidelidade");
                });

            modelBuilder.Entity("meii.Business.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique()
                        .HasFilter("[PessoaId] IS NOT NULL");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("meii.Business.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("endereco");
                });

            modelBuilder.Entity("meii.Business.Entities.ItensPedido", b =>
                {
                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("money");

                    b.HasKey("PedidoId", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("itensPedido");
                });

            modelBuilder.Entity("meii.Business.Entities.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Pago")
                        .HasColumnType("bit");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("meii.Business.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataPedido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<float>("ValorTotal")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("meii.Business.Entities.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<string>("Nome")
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<string>("TelefoneAlternativo")
                        .HasColumnType("varchar")
                        .HasMaxLength(12);

                    b.Property<string>("TelefoneCelular")
                        .HasColumnType("varchar")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("pessoa");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("meii.Business.Entities.Pin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(8);

                    b.Property<int>("QuantidadeMinima")
                        .HasColumnType("int")
                        .HasMaxLength(8);

                    b.Property<int>("QuantidadeMáxima")
                        .HasColumnType("int")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("pin");
                });

            modelBuilder.Entity("meii.Business.Entities.PinCartaoFidelidade", b =>
                {
                    b.Property<int>("PinId")
                        .HasColumnType("int");

                    b.Property<int>("CartaoFidelidadeId")
                        .HasColumnType("int");

                    b.HasKey("PinId", "CartaoFidelidadeId");

                    b.HasIndex("CartaoFidelidadeId");

                    b.ToTable("pincartaofelicidade");
                });

            modelBuilder.Entity("meii.Business.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("produto");
                });

            modelBuilder.Entity("meii.Business.Entities.ProdutoCartaoFidelidade", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("CartaoFidelidadeId")
                        .HasColumnType("int");

                    b.HasKey("ProdutoId", "CartaoFidelidadeId");

                    b.HasIndex("CartaoFidelidadeId");

                    b.ToTable("produtocartaofidelidade");
                });

            modelBuilder.Entity("meii.Business.Entities.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("vendedor");
                });

            modelBuilder.Entity("meii.Business.Entities.Desconto", b =>
                {
                    b.HasBaseType("meii.Business.Entities.CartaoFidelidade");

                    b.Property<string>("Percentual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.Property<float>("ValorMinimo")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Desconto");
                });

            modelBuilder.Entity("meii.Business.Entities.Indicacao", b =>
                {
                    b.HasBaseType("meii.Business.Entities.CartaoFidelidade");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCodigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valido")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Indicacao");
                });

            modelBuilder.Entity("meii.Business.Entities.PessoaFisica", b =>
                {
                    b.HasBaseType("meii.Business.Entities.Pessoa");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<DateTime>("DtNascimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasDiscriminator().HasValue("PessoaFisica");
                });

            modelBuilder.Entity("meii.Business.Entities.PessoaJuridica", b =>
                {
                    b.HasBaseType("meii.Business.Entities.Pessoa");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<string>("InscEstadual")
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<string>("InscMunicipal")
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasMaxLength(80);

                    b.HasDiscriminator().HasValue("PessoaJuridica");
                });

            modelBuilder.Entity("meii.Business.Entities.CartaoFidelidade", b =>
                {
                    b.HasOne("meii.Business.Entities.Empresa", "Empresa")
                        .WithMany("CartaoFidelidades")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.Cliente", b =>
                {
                    b.HasOne("meii.Business.Entities.Pessoa", "Pessoa")
                        .WithOne("Cliente")
                        .HasForeignKey("meii.Business.Entities.Cliente", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.ClienteCartaoFidelidade", b =>
                {
                    b.HasOne("meii.Business.Entities.CartaoFidelidade", "CartaoFidelidade")
                        .WithMany("ClienteCartaoFidelidades")
                        .HasForeignKey("CartaoFidelidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("meii.Business.Entities.Cliente", "Cliente")
                        .WithMany("ClienteCartaoFidelidades")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.Empresa", b =>
                {
                    b.HasOne("meii.Business.Entities.Pessoa", "Pessoa")
                        .WithOne("Empresa")
                        .HasForeignKey("meii.Business.Entities.Empresa", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("meii.Business.Entities.Endereco", b =>
                {
                    b.HasOne("meii.Business.Entities.Pessoa", "Pessoa")
                        .WithMany("Endereco")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.ItensPedido", b =>
                {
                    b.HasOne("meii.Business.Entities.Pedido", "Pedido")
                        .WithMany("ItensPedidos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("meii.Business.Entities.Produto", "Produto")
                        .WithMany("ItensPedidos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.Pagamento", b =>
                {
                    b.HasOne("meii.Business.Entities.Pedido", "Pedido")
                        .WithMany("Pagamentos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.Pedido", b =>
                {
                    b.HasOne("meii.Business.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.PinCartaoFidelidade", b =>
                {
                    b.HasOne("meii.Business.Entities.CartaoFidelidade", "CartaoFidelidade")
                        .WithMany("PinCartaoFidelidades")
                        .HasForeignKey("CartaoFidelidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("meii.Business.Entities.Pin", "Pin")
                        .WithMany("PinCartaoFidelidades")
                        .HasForeignKey("PinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.Produto", b =>
                {
                    b.HasOne("meii.Business.Entities.Categoria", "Categoria")
                        .WithMany("Produto")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.ProdutoCartaoFidelidade", b =>
                {
                    b.HasOne("meii.Business.Entities.CartaoFidelidade", "CartaoFidelidade")
                        .WithMany("ProdutoCartaoFidelidade")
                        .HasForeignKey("CartaoFidelidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("meii.Business.Entities.Produto", "Produto")
                        .WithMany("ProdutoCartaoFidelidade")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("meii.Business.Entities.Vendedor", b =>
                {
                    b.HasOne("meii.Business.Entities.Pessoa", "Pessoa")
                        .WithOne("Vendedor")
                        .HasForeignKey("meii.Business.Entities.Vendedor", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
